"""
클래스 - 사용자가 정의하는 데이터 타입이다.
        객체를 만들기 위한 설계도라고 한다.
        붕어빵틀 - 클래스, 붕어빵 - 객체

        관련있는 데이터와 함수들의 집합이다.
        때로는 데이터만 존재하는 클래스도 있고 때로는 함수만 존재하는 클래스도 있다.
        그리고 대부분의 경우에는 데이터와 함수가 같이 존재한다.

        ex. 변수와 함수가 수천 개씩 있으면.. 특정 변수가 특정 함수와 묶일 때, 이를 묶어주는 것을 클래스라고 한다.
        class 클래스명 :
            관련된 변수(멤버 변수, 필드)와 함수(멤버 함수, 메서드) #서로 관련이 된 것들끼리 클래스를 만들어야 한다. 그냥 묶으면 안됨.
"""


class Person:  # 클래스는 첫글자를 대문자로 시작한다. 문법이 아니고 묵시적으로
    name = "홍길동"  # name이라는 클래스 변수가 있다
    age = 12  # age라는 클래스 변수가 있다.
    # 객체 만들 때마다 호출되는 영역이 아니라 클래스를 처음 만들 때 딱 한 번 호출되는 영역이다.
    # 따라서 변수는 생성자에서 만들어야 한다.
    # 객체가 생성될 때마다 호출되는 함수를 말한다
    # 객체가 생성될 때마다 준비 작업을 진행하고자 하는 함수를 말한다.
    # 생성자의 호출자는 시스템이다.
    # 즉, 내가 호출할 수 없기 때문에 호출자를 정해놓는데 파이썬의 생성자는 __init__ 형태이다. 못 바꾼다.
    # 생성자의 첫번째 매개변수는 무조건 self이다. self가 객체 주소를 전달한다.
    # 자바의 this에 해당하는 요소가 self이다.

    # 클래스는 데이터 타입이다. 타입은 메모리가 없다.
    # 객체를 만들어야 비로소 메모리가 확보된다.

    def __init__(self):  # p1 = Person() 이때 호출된다.
        print("생성자 호출")


print("-------------------")
p1 = Person()  # 객체 또는 개체
print("-------------------")
print(p1.name)
print(p1.age)

print(Person.name)
print(Person.age)
# 클래스는 타입이다.
# 다른 언어의 경우, name과 age는 미리 만들어진 변수가 아니라서 클래스로 접근하면 안됨.
# 클래스를 정의하면 그 변수는 공용변수가 되면서 메모리가 잡힌다. 즉, name과 age를 만들어서 메모리를 가지고 있게 됨
# 객체 지향이 상속을 하다보면 내부적으로 거듭해서 상속을 받게 되는데 button이라는 객체를 만드는 순간 내부 메모리에도 이 button이 메모리를 차지하게 됨. 즉, 조금 다른 버튼이 하나가 생기기만 하면 계속 메모리를 잡아먹음
# 근데 이렇게 공용변수를 통해 공통으로 저장하게 되면 메모리를 엄청나게 절약할 수 있게 됨.
# **의존성 property**
# 윈도우 위젯들이 다 상속받아서 만들어진 것, 내부적으로는 버튼 하나를 만들기 위해서 함수와 변수가 몇 백개씩 생성되니까, 공용으로 하나만 잡아두고(클래스 공용공간간) 나머지를 날림 기존 코드를 98% 날릴 수 있게 됨.
# 딥러닝 코드 구조가 대부분 객체 지향으로 다 바뀜
print("-------------------")
p2 = Person()  # 객체 또는 개체
print("-------------------")
print(p2.name)
print(p2.age)


p2.name = "임꺽정"  # 이때 별도의 메모리 공간이 만들어진다.
